{"version":3,"sources":["utils/planets.ts","components/PlanetData.tsx","utils/common.ts","AutoSuggest.tsx","components/map/BaseMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fullListOfPlanetNames","planetsGeo","features","map","x","properties","name","filter","getDataForPlanetWithName","planet","property","PlanetDataContainer","styled","div","props","factionColor","PlanetData","sector","region","link","grid","faction","factionPlanets","find","planets","includes","type","factionName","colour","findFactionForPlanetWithName","climate","terrain","population","featuresOfPlanet","toString","replace","href","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","slice","getSuggestionValue","suggestion","ResultButton","button","AutoComplete","state","suggestions","planetData","renderSuggestion","onClick","setState","onChange","event","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","clearPlanetData","this","inputProps","placeholder","id","React","Component","BaseMap","lat","lng","zoom","examples","geometry","coordinates","cartodb_id","zm","canon","uid","name_web","name_alt","point_y","point_x","y","doIt","onToolTipClick","coords","reverse","Marker","key","position","title","Tooltip","Map","center","maxZoom","crs","CRS","Simple","LayersControl","createMarkers","Overlay","checked","GeoJSON","data","style","color","weight","fillColor","fillOpacity","App","setPlanetData","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18b7f5b5.chunk.js","sourcesContent":["import planetsGeo from \"../data/planetsGeo.json\";\nimport factionPlanets from \"../data/factionPlanets.json\";\nimport planets from \"../data/planets.json\";\n\nconst UNKNOWN = \"Unknown\";\n\nexport const fullListOfPlanetNames = planetsGeo.features\n  .map(x => x.properties.name)\n  .filter(name => name !== null);\n\nexport const getDataForPlanetWithName = (name: string) => {\n  return planetsGeo.features\n    .map(planet => planet.properties)\n    .filter(property => property.name === name)[0];\n};\n\nexport const findFactionForPlanetWithName = (name: string) => {\n  const faction = factionPlanets.find(\n    faction => faction.planets.includes(name) && faction.type === \"primary\"\n  );\n  return faction\n    ? { factionName: faction.factionName, colour: faction.colour }\n    : { factionName: \"Unallied\", colour: \"black\" };\n};\n\nexport const findSubFactionsForPlanetWithName = (name: string) => {\n  const factions = factionPlanets.filter(\n    faction => faction.planets.includes(name) && faction.type === \"secondary\"\n  );\n  return factions ? factions : [];\n};\n\nexport const featuresOfPlanet = (name: string) => {\n  const planet = planets.find(planet => planet.name === name);\n  return planet\n    ? planet\n    : { climate: UNKNOWN, terrain: UNKNOWN, population: UNKNOWN };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { numberWithCommas } from \"../utils/common\";\nimport {\n  featuresOfPlanet,\n  findFactionForPlanetWithName,\n  findSubFactionsForPlanetWithName\n} from \"../utils/planets\";\nimport { PlanetProperties } from \"../interfaces/planet\";\n\nconst PlanetDataContainer = styled.div`\n  border-color: white;\n  border-style: solid;\n  border-width: 2px;\n  width: fit-content;\n  padding: 10px;\n  font-size: 0.5em;\n  margin: 10px;\n  h2 {\n    background: ${props => (props.factionColor ? props.factionColor : \"black\")};\n  }\n  a {\n    color: white;\n  }\n  span {\n    font-weight: bold;\n  }\n`;\n\nconst PlanetData = (planet: PlanetProperties) => {\n  const { name, sector, region, link, grid } = planet;\n  const { factionName, colour } = findFactionForPlanetWithName(name);\n  const { climate, terrain, population } = featuresOfPlanet(name);\n\n  // const subFactionData = findSubFactionsForPlanetWithName(name);\n  // const hasSubFactions = findSubFactionsForPlanetWithName(name)\n  //   ? this.subFactionData(name).length > 0\n  //   : false;\n\n  return (\n    <PlanetDataContainer factionColor={colour}>\n      <h2>\n        {name} {grid && \"| \" + grid}\n      </h2>\n      {factionName && (\n        <p>\n          <span>Held by:</span> {factionName}\n        </p>\n      )}\n      {/* {hasSubFactions && (\n        <div>\n          <span>Factions represented:</span>\n          <ul>\n            {subFactionData.map(faction => {\n              const keyId = subFactionData.indexOf(faction);\n              return (\n                <li className=\"sub-faction\" key={keyId}>\n                  {faction.factionName}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )} */}\n      {sector && (\n        <p>\n          <span>Sector:</span> {sector}\n        </p>\n      )}\n      {region && (\n        <p>\n          <span>Region:</span> {region}\n        </p>\n      )}\n      {population && (\n        <p>\n          <span>Population:</span> {numberWithCommas(population)}\n        </p>\n      )}\n      {climate && (\n        <p>\n          <span>Climate:</span> {climate}\n        </p>\n      )}\n      {terrain && (\n        <p>\n          <span>Terrain:</span> {terrain}\n        </p>\n      )}\n      {link && (\n        <p>\n          <a href={link}>Wookieepedia</a>\n        </p>\n      )}\n    </PlanetDataContainer>\n  );\n};\n\nexport default PlanetData;\n","export const numberWithCommas = num => {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","import React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport PlanetData from \"./components/PlanetData\";\nimport {\n  getDataForPlanetWithName,\n  fullListOfPlanetNames\n} from \"./utils/planets\";\nimport styled from \"styled-components\";\nimport { PlanetProperties } from \"./interfaces/planet\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (value: string) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : fullListOfPlanetNames.filter(\n        name => name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\nconst ResultButton = styled.button`\n  font-size: 0.5em;\n  margin: 0.4em;\n  padding: 0.25em 1em;\n  border-radius: 3px;\n  color: white;\n  background-color: #282c34;\n  :hover {\n    background-color: #474b52;\n  }\n`;\n\nexport default class AutoComplete extends React.Component {\n  // Autosuggest is a controlled component.\n  // This means that you need to provide an input value\n  // and an onChange handler that updates this value (see below).\n  // Suggestions also need to be provided to the Autosuggest,\n  // and they are initially empty because the Autosuggest is closed.\n  state = {\n    value: \"\",\n    suggestions: [],\n    planetData: {} as PlanetProperties\n  };\n\n  // Use your imagination to render suggestions.\n  renderSuggestion = suggestion => {\n    const planetData: PlanetProperties = getDataForPlanetWithName(suggestion);\n    return (\n      <>\n        <ResultButton\n          onClick={() => {\n            this.setState({ planetData: planetData });\n          }}>\n          {suggestion}\n        </ResultButton>\n      </>\n    );\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n      planetData: {}\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  clearPlanetData = () => {\n    this.setState({\n      planetData: {}\n    });\n  };\n\n  render() {\n    const { value, suggestions, planetData } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Type a planet's name...\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <>\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          inputProps={inputProps}\n        />\n        {this.state.planetData.name && (\n          <div id=\"result\">\n            <PlanetData {...planetData} />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import { GeoJSON, Map, LayersControl, Marker, Tooltip } from \"react-leaflet\";\nimport React from \"react\";\nimport region from \"../../data/region.json\";\nimport sector from \"../../data/sector.json\";\nimport grid from \"../../data/grid.json\";\nimport { CRS } from \"leaflet\";\nimport { Planet } from \"../../interfaces/planet.js\";\n\nexport class BaseMap extends React.Component<{ onToolTipClick: any }> {\n  state = {\n    lat: 51.505,\n    lng: -0.09,\n    zoom: 13\n  };\n\n  examples: Planet[] = [\n    {\n      type: \"Feature\",\n      geometry: { type: \"Point\", coordinates: [47.614235, 14.680767] },\n      properties: {\n        cartodb_id: 1314,\n        zm: 1,\n        canon: 1,\n        uid: 1314,\n        region: \"Inner Rim\",\n        sector: null,\n        grid: \"O8\",\n        link: \"http://starwars.wikia.com/wiki/Taanab\",\n        name_web: \"Taanab\",\n        name_alt: null,\n        name: \"Taanab\",\n        point_y: 1652.43693312,\n        point_x: 5300.39237358,\n        y: 1652.44,\n        x: 5300.39\n      }\n    },\n    {\n      type: \"Feature\",\n      geometry: { type: \"Point\", coordinates: [47.248021, 7.17353] },\n      properties: {\n        cartodb_id: 1315,\n        zm: 0,\n        canon: 0,\n        uid: 1315,\n        region: \"Inner Rim\",\n        sector: \"Hapes Cluster\",\n        grid: \"O9\",\n        link: \"http://starwars.wikia.com/wiki/Hapes\",\n        name_web: \"Hapes\",\n        name_alt: null,\n        name: \"Hapes\",\n        point_y: 800.648232554,\n        point_x: 5259.62563026,\n        y: 800.65,\n        x: 5259.63\n      }\n    },\n    {\n      type: \"Feature\",\n      geometry: { type: \"Point\", coordinates: [49.93943, 2.344662] },\n      properties: {\n        cartodb_id: 1316,\n        zm: 0,\n        canon: 1,\n        uid: 1316,\n        region: \"Inner Rim\",\n        sector: \"Japrael\",\n        grid: \"O9\",\n        link: \"http://starwars.wikia.com/wiki/Onderon\",\n        name_web: \"Onderon\",\n        name_alt: null,\n        name: \"Onderon / Dxun\",\n        point_y: 261.079470419,\n        point_x: 5559.2319352,\n        y: 261.08,\n        x: 5559.23\n      }\n    }\n  ];\n\n  doIt = name => this.props.onToolTipClick(name);\n\n  createMarkers() {\n    return this.examples.map(planet => {\n      const coords = planet.geometry.coordinates.reverse();\n      const marker = (\n        <Marker\n          key={`marker-${planet.properties.uid}`}\n          position={coords}\n          title={planet.properties.name}\n          onClick={() => {\n            this.doIt(planet.properties);\n          }}>\n          <Tooltip key={`tooltip-${planet.properties.uid}`}>\n            {planet.properties.name}\n          </Tooltip>\n        </Marker>\n      );\n      return marker;\n    });\n  }\n\n  render() {\n    return (\n      <Map center={[0, 10]} zoom={3} maxZoom={10} crs={CRS.Simple}>\n        <LayersControl position=\"topright\">\n          {this.createMarkers()}\n          <LayersControl.Overlay name=\"Grid\" checked={false}>\n            <GeoJSON\n              data={grid}\n              style={() => ({\n                color: \"#4a83ec\",\n                weight: 0.5\n              })}\n            />\n          </LayersControl.Overlay>\n          <LayersControl.Overlay\n            name=\"Planets\"\n            checked={false}></LayersControl.Overlay>\n          <LayersControl.Overlay name=\"Galactic sectors\" checked={false}>\n            <GeoJSON\n              data={sector}\n              style={() => ({\n                color: \"#4a83ec\",\n                weight: 0.5,\n                fillColor: \"black\",\n                fillOpacity: 0.5\n              })}\n            />\n          </LayersControl.Overlay>\n          <LayersControl.Overlay name=\"Galactic regions\" checked={true}>\n            <GeoJSON\n              data={region}\n              style={() => ({\n                color: \"#4a83ec\",\n                weight: 0.5\n              })}\n            />\n          </LayersControl.Overlay>\n        </LayersControl>\n      </Map>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AutoComplete from \"./AutoSuggest\";\nimport { BaseMap } from \"./components/map/BaseMap\";\nimport { PlanetProperties } from \"./interfaces/planet\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planetData: {} as PlanetProperties\n    };\n  }\n\n  setPlanetData = (planet: PlanetProperties) => {\n    this.setState({ planetData: planet, value: planet.name });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Galaxy Map</h1>\n          <AutoComplete />\n        </header>\n        <div id=\"planetData\"></div>\n        <BaseMap onToolTipClick={this.setPlanetData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}